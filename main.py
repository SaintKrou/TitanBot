import os
import logging
from telebot import TeleBot, types
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID"))

bot = TeleBot(TELEGRAM_TOKEN)
BOT_ID = None  # –ø–æ–ª—É—á–∏–º –ø–æ–∑–∂–µ

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

logging.basicConfig(level=logging.INFO)


def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üîë –í—Ö–æ–¥", "üí¨ –ß–∞—Ç")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_states[message.chat.id] = {"mode": None}
    send_main_menu(message.chat.id)


@bot.message_handler(func=lambda m: m.text == "üîë –í—Ö–æ–¥")
def handle_login(message):
    user_states[message.chat.id] = {"mode": "auth", "last_name": "", "awaiting_phone": False}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")


@bot.message_handler(func=lambda m: m.text == "üí¨ –ß–∞—Ç")
def handle_chat(message):
    user_states[message.chat.id] = {"mode": "chat"}
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú—ã —Å–≤—è–∂–µ–º –≤–∞—Å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")


@bot.message_handler(func=lambda m: True, content_types=['text'], chat_types=['private'])
def handle_user_messages(message):
    state = user_states.get(message.chat.id)

    if not state:
        send_main_menu(message.chat.id)
        return

    if state["mode"] == "auth":
        if not state["last_name"]:
            state["last_name"] = message.text.strip()
            if state["last_name"].lower() == "–ø–µ—Ç—Ä–æ–≤":
                state["awaiting_phone"] = True
                bot.send_message(message.chat.id, "–£ –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ü–µ—Ç—Ä–æ–≤—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
            else:
                bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {state['last_name']}! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.")
                user_states[message.chat.id] = {"mode": None}
                send_main_menu(message.chat.id)
        elif state.get("awaiting_phone"):
            phone = message.text.strip()
            bot.send_message(message.chat.id, f"–¢–µ–ª–µ—Ñ–æ–Ω {phone} –ø—Ä–∏–Ω—è—Ç. –í—ã –≤–æ—à–ª–∏.")
            user_states[message.chat.id] = {"mode": None}
            send_main_menu(message.chat.id)

    elif state["mode"] == "chat":
        username = message.from_user.username or f"id{message.chat.id}"
        text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (chat_id={message.chat.id}):\n{message.text}"
        sent_msg = bot.send_message(MANAGER_CHAT_ID, text)
        logging.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ—Ç {message.chat.id} (@{username})")


# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í –ì–†–£–ü–ü–ï
@bot.message_handler(func=lambda m: True, content_types=['text'], chat_types=['group', 'supergroup'])
def handle_group_messages(message):
    if not message.reply_to_message:
        return

    replied = message.reply_to_message
    if replied.from_user.id != BOT_ID:
        return  # –æ—Ç–≤–µ—á–µ–Ω–æ –Ω–µ –±–æ—Ç—É

    text = replied.text or ""
    if "chat_id=" not in text:
        return

    try:
        chat_id_str = text.split("chat_id=")[1].split(")")[0]
        target_chat_id = int(chat_id_str)
        bot.send_message(target_chat_id, f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{message.text}")
        logging.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ chat_id: {e}")


if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        bot_info = bot.get_me()
        BOT_ID = bot_info.id
        logging.info(f"–ë–æ—Ç ID: {BOT_ID}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        bot.send_message(MANAGER_CHAT_ID, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    bot.infinity_polling()

