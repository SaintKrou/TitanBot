import os
import logging
import requests
from telebot import TeleBot, types
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "-1001234567890"))
API_BASE_URL = os.getenv("API_BASE_URL", "http://127.0.0.1:8000")

bot = TeleBot(TELEGRAM_TOKEN)
logging.basicConfig(level=logging.INFO)

# user_states: chat_id -> dict —Å –∫–ª—é—á–∞–º–∏:
# "mode" - None, "auth", "auth_phone", "chat"
# "last_name" - –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è
# "candidates" - —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç API
# "client" - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ API (dict —Å –ø–æ–ª—è–º–∏ id, –∏–º—è –∏ —Ç.–ø.)
user_states = {}

def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üîë –í—Ö–æ–¥", "üí¨ –ß–∞—Ç")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def find_clients_by_last_name(last_name):
    try:
        resp = requests.get(f"{API_BASE_URL}/clients", params={"last_name": last_name})
        resp.raise_for_status()
        return resp.json()  # –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        return []

def find_client_by_last_name_and_phone(last_name, phone):
    try:
        resp = requests.get(f"{API_BASE_URL}/clients", params={"last_name": last_name, "phone": phone})
        resp.raise_for_status()
        clients = resp.json()
        return clients[0] if clients else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {e}")
        return None

@bot.message_handler(commands=['start'])
def handle_start(message):
    logging.info(f"/start –æ—Ç {message.chat.id}")
    user_states[message.chat.id] = {"mode": None}
    send_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "üîë –í—Ö–æ–¥")
def handle_login_start(message):
    logging.info(f"–ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ –æ—Ç {message.chat.id}")
    user_states[message.chat.id] = {"mode": "auth", "last_name": "", "candidates": [], "client": None}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")

@bot.message_handler(func=lambda m: m.text == "üí¨ –ß–∞—Ç")
def handle_chat_mode(message):
    state = user_states.get(message.chat.id)
    if not state or not state.get("client"):
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        send_main_menu(message.chat.id)
        return
    logging.info(f"–í—Ö–æ–¥ –≤ —á–∞—Ç –æ—Ç {message.chat.id} (–∫–ª–∏–µ–Ω—Ç {state['client']['id']})")
    user_states[message.chat.id]["mode"] = "chat"
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text}")
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    if message.chat.id == MANAGER_CHAT_ID:
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å")
        return

    state = user_states.get(message.chat.id)
    if not state:
        logging.info(f"–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {message.chat.id}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é")
        send_main_menu(message.chat.id)
        return

    mode = state.get("mode")
    if mode == "auth":
        last_name = message.text.strip()
        state["last_name"] = last_name
        clients = find_clients_by_last_name(last_name)
        if not clients:
            bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if len(clients) == 1:
            # –û–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî —Å—Ä–∞–∑—É –±–µ—Ä–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            state["client"] = clients[0]
            state["mode"] = None
            bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {clients[0]['first_name']}! –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            send_main_menu(message.chat.id)
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
            state["candidates"] = clients
            state["mode"] = "auth_phone"
            bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ñ–∞–º–∏–ª–∏–µ–π {last_name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:")
    elif mode == "auth_phone":
        phone = message.text.strip()
        last_name = state["last_name"]
        client = find_client_by_last_name_and_phone(last_name, phone)
        if not client:
            bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        state["client"] = client
        state["mode"] = None
        bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client['first_name']}! –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        send_main_menu(message.chat.id)
    elif mode == "chat":
        client = state.get("client")
        if not client:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.")
            send_main_menu(message.chat.id)
            return
        username = message.from_user.username or str(message.chat.id)
        text_for_manager = (
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (chat_id={message.chat.id}, client_id={client['id']}):\n"
            f"{message.text}"
        )
        logging.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {text_for_manager}")
        bot.send_message(MANAGER_CHAT_ID, text_for_manager)
    else:
        send_main_menu(message.chat.id)

@bot.message_handler(content_types=['text'], chat_types=['supergroup', 'group'])
def handle_manager_reply(message):
    if message.chat.id != MANAGER_CHAT_ID:
        return  # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    if not message.reply_to_message:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return

    orig_text = message.reply_to_message.text or ""
    if "chat_id=" not in orig_text:
        logging.info("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç chat_id, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return

    try:
        part = orig_text.split("chat_id=")[1]
        chat_id_str = part.split(",")[0].strip()
        user_chat_id = int(chat_id_str)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}")
        bot.send_message(user_chat_id, f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{message.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    bot.infinity_polling()
