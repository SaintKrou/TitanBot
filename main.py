import os
import logging
from telebot import TeleBot, types
from dotenv import load_dotenv
import data_store
from datetime import datetime

load_dotenv()

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID"))

AMBIGUOUS_LAST_NAME = "–ø–µ—Ç—Ä–æ–≤"  # —Ñ–∞–º–∏–ª–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∞—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É

bot = TeleBot(TELEGRAM_TOKEN)
BOT_ID = None
user_states = {}

logging.basicConfig(level=logging.INFO)


def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    is_authorized = data_store.is_user_authorized(chat_id)
    mode = user_states.get(chat_id, {}).get("mode")

    if mode == "chat":
        markup.row("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
    else:
        if is_authorized:
            markup.row("üí¨ –ß–∞—Ç", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            markup.row("üö™ –í—ã–π—Ç–∏")
        else:
            markup.row("üí¨ –ß–∞—Ç", "üîë –í—Ö–æ–¥")

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = {"mode": None}
    send_main_menu(chat_id)


@bot.message_handler(func=lambda m: m.text == "üîë –í—Ö–æ–¥")
def handle_login(message):
    chat_id = message.chat.id
    user_states[chat_id] = {"mode": "auth", "last_name": "", "awaiting_phone": False}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")


@bot.message_handler(func=lambda m: m.text == "üí¨ –ß–∞—Ç")
def handle_chat(message):
    chat_id = message.chat.id
    if not data_store.is_user_authorized(chat_id):
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ üîë –í—Ö–æ–¥.")
        return
    user_states[chat_id] = {"mode": "chat"}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
    bot.send_message(chat_id, "‚úâÔ∏è –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–∞—Ç:", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
def handle_chat_end(message):
    chat_id = message.chat.id
    user_states.pop(chat_id, None)
    bot.send_message(chat_id, "‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=types.ReplyKeyboardRemove())
    send_main_menu(chat_id)


@bot.message_handler(func=lambda m: m.text == "üö™ –í—ã–π—Ç–∏")
def handle_logout(message):
    chat_id = message.chat.id
    if data_store.is_user_authorized(chat_id):
        data_store.remove_authorized_user(chat_id)
    user_states.pop(chat_id, None)
    bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    send_main_menu(chat_id)


@bot.message_handler(func=lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def handle_profile(message):
    chat_id = message.chat.id
    if not data_store.is_user_authorized(chat_id):
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    user_info = data_store.get_user_info(chat_id)
    last_name = user_info.get("last_name", "‚ùì")
    phone = user_info.get("phone", "")

    client = data_store.find_client_by_last_name_and_phone(last_name, phone)
    if not client:
        bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    today = datetime.today().date()
    lines = [f"üë§ *{last_name}*", f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`"]

    if client.unlimited:
        if client.subscription_end and client.subscription_end.date() >= today:
            lines.append(f"üóì–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {client.subscription_end.date().strftime('%d.%m.%Y')}")
            lines.append("‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        else:
            lines.append("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
    else:
        if client.subscription_end and client.subscription_end.date() >= today:
            lines.append(f"üóì–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {client.subscription_end.date().strftime('%d.%m.%Y')}")
            if client.purchased_sessions > 0:
                lines.append(f"üìò –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {client.purchased_sessions}")
            else:
                lines.append("‚ö†Ô∏è –ù–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π")
        else:
            lines.append("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            if client.purchased_sessions > 0:
                lines.append(f"üìò –û—Å—Ç–∞–ª–æ—Å—å {client.purchased_sessions} –∑–∞–Ω—è—Ç–∏–π, –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")

    bot.send_message(chat_id, "\n".join(lines), parse_mode="Markdown")


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("mode") in ["auth", "chat"], content_types=['text'])
def handle_user_messages(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id)
    if not state:
        user_states[chat_id] = {"mode": None}
        send_main_menu(chat_id)
        return

    if state["mode"] == "auth":
        if not state["last_name"]:
            state["last_name"] = message.text.strip()
            if state["last_name"].strip().lower() == AMBIGUOUS_LAST_NAME:
                state["awaiting_phone"] = True
                bot.send_message(chat_id, "–£ –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
            else:
                bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {state['last_name']}! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.")
                data_store.add_authorized_user(chat_id, state["last_name"])
                user_states[chat_id] = {"mode": None}
                send_main_menu(chat_id)
        elif state.get("awaiting_phone"):
            phone = message.text.strip()
            bot.send_message(chat_id, f"–¢–µ–ª–µ—Ñ–æ–Ω {phone} –ø—Ä–∏–Ω—è—Ç. –í—ã –≤–æ—à–ª–∏.")
            data_store.add_authorized_user(chat_id, state["last_name"], phone)
            user_states[chat_id] = {"mode": None}
            send_main_menu(chat_id)

    elif state["mode"] == "chat":
        username = message.from_user.username or f"id{chat_id}"
        user_info = data_store.get_user_info(chat_id)
        last_name = user_info.get("last_name", "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        text = (
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (chat_id={chat_id}):\n"
            f"üë§ –§–∞–º–∏–ª–∏—è: {last_name}\n"
            f"{message.text}"
        )
        bot.send_message(MANAGER_CHAT_ID, text)
        logging.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ—Ç {chat_id} (@{username})")


@bot.message_handler(func=lambda m: True, content_types=['text'], chat_types=['group', 'supergroup'])
def handle_group_messages(message):
    if not message.reply_to_message:
        return

    replied = message.reply_to_message
    if replied.from_user.id != BOT_ID:
        return

    text = replied.text or ""
    if "chat_id=" not in text:
        return

    try:
        chat_id_str = text.split("chat_id=")[1].split(")")[0]
        target_chat_id = int(chat_id_str)
        bot.send_message(target_chat_id, f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{message.text}")
        logging.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ chat_id: {e}")


def run_bot():
    global BOT_ID
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    try:
        data_store.restore_clients_from_file()
        data_store.restore_auth_users()
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(data_store.clients)}")
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data_store.auth_users)}")

        bot_info = bot.get_me()
        BOT_ID = bot_info.id
        logging.info(f"–ë–æ—Ç ID: {BOT_ID}")
        bot.send_message(MANAGER_CHAT_ID, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

    bot.infinity_polling()


if __name__ == "__main__":
    run_bot()
